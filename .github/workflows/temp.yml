name: temp

on:
  push:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Public IP Install
      id: ip
      uses: haythem/public-ip@v1.3

    - name: AWS CLI install
      run: |
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip awscliv2.zip
        sudo ./aws/install --update
        aws --version

    - name: AWS set Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Get Target Instance ID and IP
      id: get_instance
      run: |
        INSTANCE_ID=$(aws autoscaling describe-auto-scaling-groups \
          --auto-scaling-group-names "${{ secrets.AWS_ASG_NAME }}" \
          --query "AutoScalingGroups[0].Instances[?LifecycleState=='InService'].InstanceId" \
          --output text)

        INSTANCE_IP=$(aws ec2 describe-instances \
          --instance-ids $INSTANCE_ID \
          --query "Reservations[0].Instances[0].PublicIpAddress" \
          --output text)

        echo "INSTANCE_ID=${INSTANCE_ID}" >> $GITHUB_ENV
        echo "INSTANCE_IP=${INSTANCE_IP}" >> $GITHUB_ENV
      env:
        AWS_REGION: ${{ secrets.AWS_REGION }}

    - name: Output Target Instance ID and IP
      run: |
        echo "INSTANCE_ID: ${{ env.INSTANCE_ID }}"
        echo "INSTANCE_IP: ${{ env.INSTANCE_IP }}"

    - name: Open SecurityGroup
      run: aws ec2 authorize-security-group-ingress --group-id ${{ secrets.EC2_SECURITY_GROUP_ID }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32

    - name: Close SecurityGroup
      run: aws ec2 revoke-security-group-ingress --group-id ${{ secrets.EC2_SECURITY_GROUP_ID }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32
