name: temp

on:
  push:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: AWS CLI install
      run: |
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip awscliv2.zip
        sudo ./aws/install --update
        aws --version

    - name: AWS set Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Get latest launch template version
      id: get_latest_version
      run: |
        LATEST_VERSION=$(aws ec2 describe-launch-template-versions \
          --launch-template-id ${{ secrets.AWS_LAUNCH_TEMPLATE_ID }} \
          --query 'sort_by(LaunchTemplateVersions, &VersionNumber)[-1].VersionNumber' \
          --output text)
        echo "LATEST_VERSION=${LATEST_VERSION}" >> $GITHUB_ENV

    # env.AMI_ID を仮で決め打ちの値に設定する
    - name: Set AMI_ID
      run: echo "AMI_ID=ami-0fe4dedd5f8d293c3" >> $GITHUB_ENV

    - name: Debug
      run: |
        echo "LATEST_VERSION=${LATEST_VERSION}"
        echo "AMI_ID=${{ env.AMI_ID }}"

    # - name: Update Launch Template
    #   id: update_template
    #   run: |
    #     USER_DATA=$(echo -n '#!/bin/bash
    #     cd /home/ec2-user/splatoon3-tracker/bin
    #     nohup dotnet Nagiyu.Web.dll --urls "https://0.0.0.0:5000" > /home/ec2-user/output.log 2>&1 &' | base64 | tr -d '\n')

    #     NEW_VERSION=$(aws ec2 create-launch-template-version \
    #       --launch-template-id ${{ secrets.AWS_LAUNCH_TEMPLATE_ID }} \
    #       --version-description "Updated for new build" \
    #       --source-version ${{ env.LATEST_VERSION }} \
    #       --launch-template-data '{"ImageId":"'"${{ env.AMI_ID }}"'","UserData":"'"$USER_DATA"'"}' \
    #       --query 'LaunchTemplateVersion.VersionNumber' \
    #       --output text)
    #     echo "NEW_VERSION=${NEW_VERSION}" >> $GITHUB_ENV

    # - name: Trigger Rolling Update
    #   run: |
    #     aws autoscaling update-auto-scaling-group \
    #       --auto-scaling-group-name "${{ secrets.AWS_ASG_NAME }}" \
    #       --launch-template "LaunchTemplateName=${{ secrets.AWS_LAUNCH_TEMPLATE_NAME }},Version=${{ env.NEW_VERSION }}"
    #     aws autoscaling start-instance-refresh \
    #       --auto-scaling-group-name "${{ secrets.AWS_ASG_NAME }}"
