name: deploy

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Setup Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '22'

    - name: Install dependencies
      run: npm install

    - name: Build with Vite
      run: npm run build

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 8.0.x

    - name: Publish with dotnet
      run: dotnet publish --configuration Release home/web/Nagiyu.Web.csproj

    - name: Copy files
      run: cp -r home/web/bin/Release/net8.0/publish bin

    - name: Add Certificates
      run: |
        echo '${{ secrets.PRODUCTION_FULLCHAIN }}' > bin/fullchain.pem
        echo '${{ secrets.PRODUCTION_PRIVATE_KEY }}' > bin/privkey.pem

    - name: Update appsettings.json
      run: echo '${{ secrets.PRODUCTION_APPSETTINGS }}' > bin/appsettings.json

    - name: Remove Nginx Settings in target path
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.XSERVER_SSH_HOST }}
        username: ${{ secrets.XSERVER_SSH_USERNAME }}
        key: ${{ secrets.XSERVER_SSH_PRIVATE_KEY }}
        port: ${{ secrets.XSERVER_SSH_PORT }}
        script: |
          sudo rm -rf /etc/nginx/sites-enabled/splatoon3-tracker
          sudo rm -rf /etc/nginx/sites-available/splatoon3-tracker
          sudo rm -rf ${{ secrets.PRODUCTION_TARGET_PATH }}/nginx

    - name: Upload Nginx Settings to server
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.XSERVER_SSH_HOST }}
        username: ${{ secrets.XSERVER_SSH_USERNAME }}
        key: ${{ secrets.XSERVER_SSH_PRIVATE_KEY }}
        port: ${{ secrets.XSERVER_SSH_PORT }}
        source: nginx/*
        target: ${{ secrets.PRODUCTION_TARGET_PATH }}

    - name: Replace nginx configuration and Reload nginx
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.XSERVER_SSH_HOST }}
        username: ${{ secrets.XSERVER_SSH_USERNAME }}
        key: ${{ secrets.XSERVER_SSH_PRIVATE_KEY }}
        port: ${{ secrets.XSERVER_SSH_PORT }}
        script: |
          sudo cp ${{ secrets.PRODUCTION_TARGET_PATH }}/nginx/splatoon3-tracker /etc/nginx/sites-available/
          sudo ln -s /etc/nginx/sites-available/splatoon3-tracker /etc/nginx/sites-enabled/
          sudo systemctl restart nginx

    - name: Public IP Install
      id: ip
      uses: haythem/public-ip@v1.3

    - name: AWS CLI install
      run: |
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip awscliv2.zip
        sudo ./aws/install --update
        aws --version

    - name: AWS set Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Get Target Instance ID and IP
      id: get_instance
      run: |
        INSTANCE_IDS=$(aws autoscaling describe-auto-scaling-groups \
          --auto-scaling-group-names "${{ secrets.AWS_ASG_NAME }}" \
          --query "AutoScalingGroups[0].Instances[?LifecycleState=='InService'].InstanceId" \
          --output text)

        INSTANCE_ID=$(echo "$INSTANCE_IDS" | awk '{print $1}')

        INSTANCE_IP=$(aws ec2 describe-instances \
          --instance-ids $INSTANCE_ID \
          --query "Reservations[0].Instances[0].PublicIpAddress" \
          --output text)

        echo "INSTANCE_ID=${INSTANCE_ID}" >> $GITHUB_ENV
        echo "INSTANCE_IP=${INSTANCE_IP}" >> $GITHUB_ENV
      env:
        AWS_REGION: ${{ secrets.AWS_REGION }}

    - name: Open SecurityGroup
      run: aws ec2 authorize-security-group-ingress --group-id ${{ secrets.EC2_SECURITY_GROUP_ID }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32

    - name: Remove all files in target path
      uses: appleboy/ssh-action@master
      with:
        host: ${{ env.INSTANCE_IP }}
        username: ${{ secrets.AWS_SSH_USERNAME }}
        key: ${{ secrets.AWS_SSH_PRIVATE_KEY }}
        port: ${{ secrets.AWS_SSH_PORT }}
        script: |
          kill $(ps aux | grep '[d]otnet' | awk '{print $2}')
          cd /home/ec2-user/splatoon3-tracker/bin
          sudo rm -Rf *

    - name: Upload artifact to server
      uses: appleboy/scp-action@master
      with:
        host: ${{ env.INSTANCE_IP }}
        username: ${{ secrets.AWS_SSH_USERNAME }}
        key: ${{ secrets.AWS_SSH_PRIVATE_KEY }}
        port: ${{ secrets.AWS_SSH_PORT }}
        source: bin/*
        target: /home/ec2-user/splatoon3-tracker

    - name: Recreate Splatoon3 Tracker
      uses: appleboy/ssh-action@master
      with:
        host: ${{ env.INSTANCE_IP }}
        username: ${{ secrets.AWS_SSH_USERNAME }}
        key: ${{ secrets.AWS_SSH_PRIVATE_KEY }}
        port: ${{ secrets.AWS_SSH_PORT }}
        script: |
          cd /home/ec2-user/splatoon3-tracker/bin
          nohup dotnet Nagiyu.Web.dll --urls "https://0.0.0.0:5000" > /home/ec2-user/output.log 2>&1 &

    - name: Close SecurityGroup
      run: aws ec2 revoke-security-group-ingress --group-id ${{ secrets.EC2_SECURITY_GROUP_ID }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32

    - name: Create New AMI
      id: create_ami
      run: |
        AMI_ID=$(aws ec2 create-image \
          --instance-id ${{ env.INSTANCE_ID }} \
          --name "Splatoon3Tracker-$(date +%Y%m%d%H%M%S)" \
          --no-reboot \
          --query 'ImageId' \
          --output text)
        echo "AMI_ID=${AMI_ID}" >> $GITHUB_ENV

    - name: Update Launch Template
      id: update_template
      run: |
        NEW_VERSION=$(aws ec2 create-launch-template-version \
          --launch-template-id ${{ secrets.AWS_LAUNCH_TEMPLATE_ID }} \
          --version-description "Updated for new build" \
          --source-version 4 \
          --launch-template-data '{"ImageId":"'"${{ env.AMI_ID }}"'"}' \
          --query 'LaunchTemplateVersion.VersionNumber' \
          --output text)
        echo "NEW_VERSION=${NEW_VERSION}" >> $GITHUB_ENV

    - name: Trigger Rolling Update
      run: |
        aws autoscaling update-auto-scaling-group \
          --auto-scaling-group-name "${{ secrets.AWS_ASG_NAME }}" \
          --launch-template "LaunchTemplateName=${{ secrets.AWS_LAUNCH_TEMPLATE_NAME }},Version=${{ env.NEW_VERSION }}"
        aws autoscaling start-instance-refresh \
          --auto-scaling-group-name "${{ secrets.AWS_ASG_NAME }}"
